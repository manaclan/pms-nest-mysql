// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



// Note that during installation, Prisma automatically invokes the prisma generate command for you. 
// In the future, you need to run this command after every change to your Prisma models to update your generated Prisma Client.
// for saving dev migration
// npx prisma migrate dev --name commit_message
// for dev without saving migration
// npx prisma db push
// npx prisma migrate deploy --name commit_message
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Hotel{
  id Int @id @default(autoincrement())
  code String @unique
  bookings Booking[]
  roomTypes RoomType[] 
  rooms Room[]
  createAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  @@map("hotels")
}

model Room{
  id Int @id @default(autoincrement())
  roomName String @unique
  status RoomStatus @default(BOOKED)
  hotel Hotel @relation(fields: [hotelCode], references: [code])
  hotelCode String 
  roomType RoomType @relation(fields: [roomTypeCode], references: [code])
  roomTypeCode String
  roomsInBooking RoomInBooking[] @relation("roomInBooking") 
  createAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  //can omit the @relation and the roomInBooking in the corresponding relationship
  // I left here for demonstration feature of prisma
  @@map("rooms")
}

model RoomType{
  id Int @id @default(autoincrement())
  code String @unique
  name String @unique
  rooms Room[]
  @@unique([code,name])
  hotel Hotel @relation(fields: [hotelCode], references: [code])
  hotelCode String
  roomsInBooking RoomInBooking[]
  capacity Int
  createAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  @@map("room_types")
}

enum RoomStatus { 
  BOOKED 
  CHECKIN 
  CHECKOUT
}

model Booking {
  id    Int    @id @default(autoincrement())
  startDate DateTime
  endDate DateTime
  customers Int 
  bookerName String
  bookerPhone String
  bookerEmail String
  firstName String
  lastName String
  hotel Hotel @relation(fields: [hotelCode],references: [code])
  hotelCode String
  hotelSpecificId Int
  bookingCode String @unique
  rooms RoomInBooking[]
  createAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  @@map("bookings")
}

model RoomInBooking{
  id    Int    @id @default(autoincrement()) @map("roomcode")
  startTime DateTime
  endTime DateTime
  room Room? @relation("roomInBooking",fields: [roomId],references: [id])
  roomId Int? @map("roomId")
  totalCustomersRemain Int?
  roomType RoomType @relation(fields: [roomTypeCode], references: [code])
  roomTypeCode String
  status RoomStatus @default(BOOKED)
  guests Guest[]
  booking Booking @relation(fields: [bookingCode],references: [bookingCode])
  bookingCode String
  createAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  @@unique([roomId,startTime,endTime], name:"guestInOutDate")
  @@map("rooms_bookings")
}


model Guest{
  id Int @id @default(autoincrement()) 
  name String
  status GuestStatus @default(BOOKED)
  room RoomInBooking @relation(fields: [roomId, startDate, endDate], references: [roomId,startTime, endTime])
  roomId Int
  startDate DateTime 
  endDate DateTime
  phone String
  email String 
  address String
  firstName String
  lastName String
  createAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  @@index([email,phone])
  @@unique([email,phone], name: "emailPhone")
  @@map("guests")
}

enum GuestStatus { 
  BOOKED 
  CHECKIN 
  CHECKOUT
}

model User{
  id Int @id @default(autoincrement())
  username String @unique
  password String
  role Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role{
  ADMIN
}